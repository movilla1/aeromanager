# Copyright (c) 2021 by Mario O. Villarroel - ElcanSoftware
require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

::RSpec.describe("/sessions", type: :request) do
  # Session. As you add validations to Session, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    {
      password: "testing123",
      email: "test@example.com"
    }
  }

  let(:invalid_attributes) {
    {
      password: "testing123456",
      email: "test@example.com"
    }
  }
  let!(:user) { FactoryBot::create(:user, :admin) }

  before do
    user.update(valid_attributes)
    user.reload
  end

  describe "GET /new" do
    it "renders a successful response" do
      get login_url
      expect(response).to(be_successful)
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      before do
        post(login_url, params: valid_attributes)
      end

      it "creates a new Session" do
        expect(session[:user_id]).to(eq(user.id))
      end

      it "redirects to the created session" do
        expect(response).to(redirect_to(admin_root_url))
      end
    end

    context "with invalid parameters" do
      before do
        post(login_url, params: invalid_attributes)
      end

      it "does not create a new Session" do
        expect(session[:user_id]).to(eq(nil))
      end

      it "renders a successful response (i.e. to display the 'new' template)" do
        expect(response).to(be_successful)
      end
    end
  end

  describe "DELETE /destroy" do
    before do
      get logout_url
    end

    it "destroys the requested session" do
      expect(session[:user_id]).to(eq(nil))
    end

    it "redirects to the sessions list" do
      expect(response).to(redirect_to(root_url))
    end
  end
end
