# Copyright (c) 2021 by Mario O. Villarroel - ElcanSoftware
require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

::RSpec.describe("/api/v1/flight_logs", type: :request) do
  # This should return the minimal set of attributes required to create a valid
  # FlightLog. As you add validations to FlightLog, be sure to
  # adjust the attributes here as well.
  let(:airplane) { ::FactoryBot.create(:airplane) }
  let(:user) { ::FactoryBot.create(:user) }
  let(:valid_attributes) {
    {
      flight_start: ::DateTime.current - 1.hour,
      flight_end: ::DateTime.current,
      airplane_id: airplane.id,
      user_id: user.id,
      flight_type: :VP,
      normalized_duration: 1,
      instructor_id: ::FactoryBot.create(:user).id,
      origin_airport: "CED",
      destination_airport: "CED",
      odo_start: 123,
      odo_end: 125
    }
  }

  let(:invalid_attributes) {
    {
      flight_start: ::Time.current,
      flight_end: ::Time.current - 10.minutes,
      airplane_id: airplane.id,
      flight_type: :VP
    }
  }

  # This should return the minimal set of values that should be in the headers
  # in order to pass any filters (e.g. authentication) defined in
  # FlightLogsController, or in your router and rack
  # middleware. Be sure to keep this updated too.
  let(:valid_headers) {
    { Authorization: "Bearer #{::SpecSessionHelper.get_token(user.id)}" }
  }

  describe "GET /index" do
    it "renders a successful response" do
      ::FlightLog.create!(valid_attributes)
      get api_v1_flight_logs_url, headers: valid_headers, as: :json
      expect(response).to(be_successful)
    end
  end

  describe "GET /show" do
    let!(:flight_log) { ::FlightLog.create!(valid_attributes) }
    it "renders a successful response" do
      get api_v1_flight_log_url(flight_log), as: :json, headers: valid_headers
      expect(response).to(be_successful)
    end

    it "Fails with not found message" do
      get api_v1_flight_log_url("-1"), as: :json, headers: valid_headers
      expect(response.body).to(include("Flight log wasn't found,"))
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new FlightLog" do
        expect {
          post(
            api_v1_flight_logs_url,
            params: { flight_log: valid_attributes },
            headers: valid_headers,
            as: :json
          )
        }.to(change(::FlightLog, :count).by(1))
      end

      it "renders a JSON response with the new flight_log" do
        post api_v1_flight_logs_url, params: { flight_log: valid_attributes }, headers: valid_headers, as: :json
        expect(response).to(have_http_status(:ok))
        expect(response.content_type).to(match(a_string_including("application/json")))
      end
    end

    context "with invalid parameters" do
      it "does not create a new FlightLog" do
        expect {
          post(
            api_v1_flight_logs_url,
            params: { flight_log: invalid_attributes },
            as: :json
          )
        }.to(change(::FlightLog, :count).by(0))
      end

      it "renders a JSON response with errors for the new flight_log" do
        post api_v1_flight_logs_url, params: { flight_log: invalid_attributes }, headers: valid_headers, as: :json
        expect(response).to(have_http_status(:unprocessable_entity))
        expect(response.content_type).to(eq("application/json; charset=utf-8"))
      end
    end
  end

  describe "PATCH /update" do
    let(:airplane2) { ::FactoryBot.create(:airplane) }
    context "with valid parameters" do
      let(:new_attributes) {
        {
          flight_start: ::Time.current - 2.hour,
          flight_end: ::Time.current,
          airplane_id: airplane2.id
        }
      }

      it "updates the requested flight_log" do
        flight_log = ::FlightLog.create!(valid_attributes)
        patch api_v1_flight_log_url(flight_log), params: { flight_log: new_attributes }, headers: valid_headers, as: :json
        flight_log.reload
        expect(flight_log.airplane_id).to(eq(airplane2.id))
      end

      it "renders a JSON response with the flight_log" do
        flight_log = ::FlightLog.create!(valid_attributes)
        patch api_v1_flight_log_url(flight_log), params: { flight_log: new_attributes }, headers: valid_headers, as: :json
        expect(response).to(have_http_status(:ok))
        expect(response.content_type).to(match(a_string_including("application/json")))
      end
    end

    context "with invalid parameters" do
      it "renders a JSON response with errors for the flight_log" do
        flight_log = ::FlightLog.create!(valid_attributes)
        patch api_v1_flight_log_url(flight_log), params: { flight_log: invalid_attributes }, headers: valid_headers, as: :json
        expect(response).to(have_http_status(:unprocessable_entity))
        expect(response.content_type).to(eq("application/json; charset=utf-8"))
      end
    end
  end

  describe "DELETE /destroy" do
    it "destroys the requested flight_log" do
      flight_log = ::FlightLog.create!(valid_attributes)
      expect {
        delete(api_v1_flight_log_url(flight_log), headers: valid_headers, as: :json)
      }.to(change(::FlightLog, :count).by(-1))
    end
  end

  describe "GET /totalize" do
    it "renders a successful response" do
      ::FlightLog.create!(valid_attributes)
      get totalize_api_v1_flight_logs_url, headers: valid_headers, as: :json
      expect(response.body).to(include("\"total\":1.0"))
    end
  end
end
